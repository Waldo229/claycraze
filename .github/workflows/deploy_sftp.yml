# .github/workflows/deploy-sftp.yml
name: Deploy to SiteGround (SFTP) — Staging & Prod

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      target:
        description: "Where to deploy"
        required: true
        default: "staging"
        type: choice
        options: [staging, production]

defaults:
  run:
    shell: bash

concurrency:
  group: deploy-${{ github.event.inputs.target || github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SG_PORT: ${{ secrets.SG_PORT }}   # e.g., 18765

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Pick staging vs production and write to $GITHUB_ENV (no risky quoting)
      - name: Select environment (staging/prod)
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TARGET="${{ github.event.inputs.target }}"
          else
            if   [[ "${{ github.ref }}" == "refs/heads/main"    ]]; then TARGET="production"
            elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then TARGET="staging"
            else echo "::error::Unsupported branch ${{ github.ref }}"; exit 1
            fi
          fi
          echo "TARGET=$TARGET" >> "$GITHUB_ENV"
          if [[ "$TARGET" == "production" ]]; then
            echo "DEST_PATH=${{ secrets.SG_DEST_PROD }}" >> "$GITHUB_ENV"
            echo "BASE_URL=https://claycraze.com"       >> "$GITHUB_ENV"
          else
            echo "DEST_PATH=${{ secrets.SG_DEST_STAGING }}" >> "$GITHUB_ENV"
            echo "BASE_URL=https://staging.claycraze.com"   >> "$GITHUB_ENV"
          fi
          echo "Deploy target: $TARGET"

      - name: Validate config (fail fast)
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          : "${SG_USER:?Missing SG_USERNAME secret}"
          : "${SG_HOST:?Missing SG_HOST secret}"
          : "${DEST_PATH:?Missing DEST_PATH (set SG_DEST_PROD / SG_DEST_STAGING)}"
          : "${SG_PORT:?Missing SG_PORT secret}"

      - name: Setup SSH key
        env:
          PRIV: ${{ secrets.SG_PRIVATE_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s' "$PRIV" | tr -d '\r' > ~/.ssh/sg-ci
          chmod 600 ~/.ssh/sg-ci

      - name: Show CI key fingerprint
        run: ssh-keygen -y -f ~/.ssh/sg-ci | ssh-keygen -lf -

      - name: Assert CI key fingerprint matches expected (optional)
        env:
          EXPECTED_V: ${{ vars.SG_EXPECTED_FPR }}
          EXPECTED_S: ${{ secrets.SG_EXPECTED_FPR }}
        run: |
          set -euo pipefail
          EXPECTED="${EXPECTED_V:-${EXPECTED_S:-}}"
          ACTUAL="$(ssh-keygen -y -f ~/.ssh/sg-ci | ssh-keygen -lf - | awk '{print $2}')"
          if [[ -n "$EXPECTED" && "$ACTUAL" != "$EXPECTED" ]]; then
            echo "::error::CI key fingerprint mismatch"; exit 1
          fi

      - name: Install lftp
        run: |
          sudo apt-get update -y
          sudo apt-get install -y lftp

      - name: Test SFTP connectivity
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          lftp -u "$SG_USER","" sftp://$SG_HOST \
            -e "set sftp:connect-program \"ssh -a -x -i ~/.ssh/sg-ci -p ${SG_PORT} -o StrictHostKeyChecking=no\"; \
                set net:max-retries 1; set net:timeout 20; set cmd:fail-exit yes; \
                pwd; bye"

      - name: Deploy via SFTP mirror
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          echo "Deploying to $SG_USER@$SG_HOST:${DEST_PATH} (port ${SG_PORT})"

          # Create marker files in the workspace
          echo "deployed $(date -u +'%Y-%m-%dT%H:%M:%SZ') $GITHUB_SHA ($TARGET)" > "$GITHUB_WORKSPACE/deploy.txt"
          echo "internal $(date -u) $GITHUB_SHA $TARGET" > "$GITHUB_WORKSPACE/.ci_deploy_marker.txt"

          cd "$GITHUB_WORKSPACE"
          ls -la | sed -n '1,80p'

          # cd into exact destination and mirror
          lftp -u "$SG_USER","" sftp://$SG_HOST \
            -e "set sftp:connect-program \"ssh -a -x -i ~/.ssh/sg-ci -p ${SG_PORT} -o StrictHostKeyChecking=no\"; \
                set net:max-retries 2; set net:timeout 30; set ssl:verify-certificate no; set cmd:fail-exit yes; \
                lcd \"$GITHUB_WORKSPACE\"; \
                echo Remote PWD:; pwd; echo Checking path: ${DEST_PATH}; \
                cd \"${DEST_PATH}\"; pwd; cls -la; \
                mirror -R --delete --verbose=1 --parallel=4 \
                       --exclude-glob .git/ --exclude-glob .github/ --exclude-glob .vscode/ \
                       --exclude-glob node_modules/ --exclude-glob \"*.md\" \
                       ./ ./; \
                bye"

      - name: Verify live deploy marker (HTTP with SFTP fallback)
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          URL="$BASE_URL/deploy.txt?nocache=$(date +%s)"
          STATUS=$(curl -sS -o /tmp/marker.txt -w '%{http_code}\n' "$URL" || true)
          echo "HTTP status: $STATUS for $URL"

          if [[ "$STATUS" == "200" ]]; then
            echo "deploy.txt via HTTP:"
            head -n1 /tmp/marker.txt
            exit 0
          fi

          echo "::warning::HTTP $STATUS — falling back to SFTP to verify deploy.txt presence/contents"

          # Fetch deploy.txt to /tmp via SFTP and show first line
          lftp -u "$SG_USER","" sftp://$SG_HOST \
            -e "set sftp:connect-program \"ssh -a -x -i ~/.ssh/sg-ci -p ${SG_PORT} -o StrictHostKeyChecking=no\"; \
                cd \"${DEST_PATH}\"; pwd; \
                echo 'Remote listing:'; cls -la deploy.txt; \
                get -O /tmp deploy.txt; \
                bye"

          echo "First line of deploy.txt (via SFTP):"
          head -n1 /tmp/deploy.txt || true

          echo "::error::deploy.txt exists at ${DEST_PATH} but HTTP returned $STATUS. \
Likely the subdomain Document Root is not ${DEST_PATH##*/} (or DNS/proxy is pointing elsewhere). \
Fix the SiteGround subdomain’s Document Root to 'staging.claycraze.com/public_html' and retry."
          exit 1

