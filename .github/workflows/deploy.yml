name: Deploy to SiteGround (SFTP)

on:
  push:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash

concurrency:
  group: deploy-to-siteground
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Set these in: Repo → Settings → Secrets and variables → Actions
      SG_PORT: ${{ secrets.SG_PORT }}           # e.g. 18765
      SG_DEST: ${{ secrets.SG_DEST }}           # e.g. www/claycraze.com/public_html/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key file
        env:
          PRIV: ${{ secrets.SG_PRIVATE_KEY }}   # your private key (BEGIN/END OPENSSH)
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s' "$PRIV" | tr -d '\r' > ~/.ssh/sg-ci
          chmod 600 ~/.ssh/sg-ci

      - name: Show CI key fingerprint
        run: |
          echo "CI key fingerprint (must match the key authorized in SiteGround):"
          ssh-keygen -y -f ~/.ssh/sg-ci | ssh-keygen -lf -

      # Works whether SG_EXPECTED_FPR is saved as a Variable or as a Secret
      - name: Assert CI key fingerprint matches expected
        env:
          EXPECTED_V: ${{ vars.SG_EXPECTED_FPR }}     # use this if you have Variables
          EXPECTED_S: ${{ secrets.SG_EXPECTED_FPR }}  # or keep it as a Secret
        run: |
          set -euo pipefail
          EXPECTED="${EXPECTED_V:-${EXPECTED_S:-}}"
          ACTUAL="$(ssh-keygen -y -f ~/.ssh/sg-ci | ssh-keygen -lf - | awk '{print $2}')"
          if [ -n "$EXPECTED" ]; then
            echo "Expected: $EXPECTED"
            echo "Actual:   $ACTUAL"
            [ "$ACTUAL" = "$EXPECTED" ] || { echo "::error::CI private key does not match expected fingerprint"; exit 1; }
          else
            echo "No SG_EXPECTED_FPR provided; skipping fingerprint assertion."
          fi

      - name: Install lftp
        run: |
          sudo apt-get update -y
          sudo apt-get install -y lftp

      - name: Test SFTP connectivity
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          lftp -u "$SG_USER","" sftp://$SG_HOST \
            -e "set sftp:connect-program \"ssh -a -x -i ~/.ssh/sg-ci -p ${SG_PORT:-18765} -o StrictHostKeyChecking=no\"; \
                set net:max-retries 1; set net:timeout 20; set cmd:fail-exit yes; \
                pwd; cls -la; bye"

      - name: Create deploy marker
        run: echo "deployed $(date -u) $GITHUB_SHA" > .ci_deploy_marker.txt

      - name: Deploy via SFTP mirror
        env:
          SG_USER: ${{ secrets.SG_USERNAME }}
          SG_HOST: ${{ secrets.SG_HOST }}
        run: |
          set -euo pipefail
          DEST_PATH="${SG_DEST:-www/claycraze.com/public_html/}"
          echo "Deploying to $SG_USER@$SG_HOST:$DEST_PATH (port ${SG_PORT:-18765})"
          lftp -u "$SG_USER","" sftp://$SG_HOST \
            -e "set sftp:connect-program \"ssh -a -x -i ~/.ssh/sg-ci -p ${SG_PORT:-18765} -o StrictHostKeyChecking=no\"; \
                set net:max-retries 2; set net:timeout 30; set ssl:verify-certificate no; set cmd:fail-exit yes; \
                put -O \"$DEST_PATH\" .ci_deploy_marker.txt; \
                mirror -R --delete --verbose=1 --parallel=4 \
                       --exclude-glob .git/ --exclude-glob .github/ --exclude-glob .vscode/ \
                       --exclude-glob node_modules/ --exclude-glob \"*.md\" \
                       ./ \"$DEST_PATH\"; \
                echo \"Listing $DEST_PATH\"; cls -la \"$DEST_PATH\"; \
                bye"
